Задача 1. Реализуйте классы MinStat, MaxStat, AverageStat, которые будут находить минимум, максимум и среднее арифметическое последовательности целых чисел. Экземпляры классов инициализируются без аргументов. Метод add_number должен добавлять в статистику число, которое будет учтено при вычислении финального результата методом result. Для экземпляров MinStat и MaxStat result должен возвращать целое число, для AverageStat — число типа float (это число будет сравниваться с правильным ответом до седьмой значащей цифры). Если в последовательности отсутствуют числа и статистические величины вычислить невозможно, метод result должен возвращать None. Формат ввода Каждый тест представляет собой код, в котором будут использоваться ваши классы. Файл c решением необязательно называть solution.py, он будет переименован автоматически. Тест запускается с вашими классами, а его вывод сравнивается с правильным решением.

Задача 2.

Реализуйте класс Table, который хранит целые числа в двумерной таблице. При инициализации Table(rows, cols) экземпляру передаются число строк и столбцов в таблице. Строки и столбцы нумеруются с нуля. Ячейки таблицы инициализируются нулями. table.get_value(row, col) — прочитать значение из ячейки со строкой row, столбцом col. Если ячейка с индексами row и col не лежит внутри таблицы, нужно вернуть None. table.set_value(row, col, value) — записать число в ячейку со строкой row, столбцом col. Гарантируется, что в тестах будет в запись только в ячейки внутри таблицы. table.n_rows() — вернуть число строк в таблице. table.n_cols() — вернуть число столбцов в таблице. Формат ввода -------- Каждый тест представляет собой код, в котором будут использоваться ваш класс. Файл c решением необязательно называть solution.py, он будет переименован автоматически. Тест запускается с вашим классом, а его вывод сравнивается с правильным решением.
